package cn.az.code.encrypt;

import java.util.Objects;

/**
 * @author Liz
 * @date 1/16/2020
 */
public class CreateSlip {

    public static void main(String[] args) {
        String dateTime = "20191123092324", tid = "6406503212345";
        String key = "30293534053d37353c3d6b68696e6f6c";
        byte[] iv = (tid.substring(5) + dateTime.substring(6)).getBytes();
        byte[] keys = AesDecryptUtil.hexStringToBytes(key);
        String decryptedString = "", encryptedString = "";

        for (int i = 0; i < keys.length; i++) {
            keys[i] = (byte) (keys[i] ^ 0x5a);
        }
        String newKey = "json_gmofg" + dateTime.substring(2, 8);
        byte[] newKeys = newKey.getBytes();

        // String template = "{\"DenpyoInfo\":" + "{\"KessaiSyubeu\":\"01\",\"TerminalSeqNo\":\"12345\",\"YukoKigen\":\"20201212\",\"TerminalID\":\"6406503212345\",\"ProcessSeqNo\":\"00107\",\"Riyoubi\": \"20191123092324\",\"ToriatukaiKubun\":\"123456\",\"Amount\":\"0009999\",\"Signature\":\"hahaha\"}," +
        //      "\"IcInfo\":{\"BrandName\":\"123456789\",\"CardSeqNo\":\"666\"}," +
        //  "\"SonotaInfo\":{\"MerchantInfo\":\"chino\",\"MerchantGyosyu\":\"eve\"}," +
        //    "\"DccInfo\":{\"CurrencyAbbreviation\":\"dollar\",\"DisclaimerLength\":\"444\"}}";
        String template = "{\"DenpyoInfo\":{\"KessaiSyubeu\":\"02\",\"ReceiptTitle\":\"CREDIT CARD SALES SLIP\",\"MerchantName\":\"前面的内容\\r\\n后面的内容\",\"TerminalSeqNo\":\"00001\",\"TerminalId\":\"6406503212345\",\"ProcessSeqNo\":\"00107\",\"Amount\":\"0009999\",\"SignatureFlag\":\"2\",\"Annai\":\"this is annai\",\"CardInfoResource\":\"MS\",\"CardCompanyCode\":\"UCGROUP\",\"Uriba\":\"Kyoto\",\"Kakariin\":\"fubuki\",\"CancelTerminalSeqNo\":\"00001\",\"Riyoubi\":\"20190922084812\",\"MemberShipNo\":\"124121******1231\",\"kanaName\":\"fubuki\",\"YuKoKigen\":\"1119\",\"ServiceCode\":\"1\",\"TorikeshiKubun\":\"1\",\"ShiharaiKubun\":\"10\",\"ShiharaiKaisu\":\"21\",\"ToritukaiKubun\":\"110\",\"ItemCode\":\"2270\",\"ApprovalNo\":\"0100\",\"TaxAmount\":\"2700\",\"Goukei\":\"3000\"},\"IcInfo\":{\"BrandName\":\"123456789\",\"CardSeqNo\":\"666\",\"Aid\":\"4F\",\"ApprovalNo\":\"VISADEBIT\",\"ATC\":\"9f36\",\"ARC\":\"8A\",\"TC\":\"9F26\",\"TVR\":\"95\",\"CVR\":\"9F34\",\"CardNoCheckReason\":\"fumein\"},\"SonotaInfo\":{\"MerchantInfo\":\"chino\",\"MerchantGyosyu\":\"eve\"},\"GinrenInfo\":{oiqoowqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqoaqqll\"BankNames\":\"SoftBank\",\"cup no\":\"940201\",\"cup send date\":\"190201\"},\"DccInfo\":{\"MarkUp\":\"1.8\",\"CurrencyAbbreviation\":\"dollar\",\"ExchangeRateUnit\":\"1\",\"Exchange_rate\":\"18\",\"transaction currency\":\"1180\",\"Disclaimer\":\"aaaaaaaaaaa\",\"DisclaimerLength\":\"444\"}}";
        byte[] temp = template.getBytes();

        try {
            encryptedString = AesDecryptUtil.bytesToHexString(Objects.requireNonNull(AesDecryptUtil.vpadEncrypt(
                    AesDecryptUtil.MODE_CBC, iv, newKeys.length * 8, newKeys, temp, temp.length)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("encryptedString = " + encryptedString);

        String gyomu = "2A44E7A173C04FCC0F93AFA08FF12C63EF18ACFEFDF29719D51E2F96DA6D645F023F7A768B2AB9DBCD781A825B248E20C8219C17F08AD2A613BB1D330955A2004F6F6B6FE928709B9B1F6968388E495FCA9B4CB66D7A7DA0A44125B7FC9F51A49477DD89AFFFCF509FF8A86E037E2E5BAA5856717DE5D05304F3D8215CD8A542C56AB1F6256A39BCC7B7EF67CF11C5742DD23227211C3B06842C1084C5089BD761CB0A4033D5327818A3109C32240926882A48703A86E298EBCEDCBCB85531F31811425911C82334B8FF0266B523B79AAE9CBD5906100CAF25D8A972255A6AED1C578359CFC0C9B4C7785ABF55E3ED889D55CC948512335C3E71734CEBDE30CE97BD309E50EDE56A8EE41D2656E239ADF55F91769863897957EA7D0544497FB80B84CF66337D5E010EFA521E36FE6F8B59E1D0D4E9B1F186211BD4D8CE61C799615F6EF3E1F89662E505321F2DA446E81F304115F5299844A9A1A69E847292E99C3655BA3F6E9CC8DBD9B4BEEC9EDA36FF4F27579F86AE5CEC42270C88EE8434826F22F16E55662FFA39EA89628F708C5E704D8450F721B0E0FDA846EE746216F7F0AAFEFE7F29A0C68423370745C86563B2A9DCD9B95A67B70040046628DB717077B324FA037664B84923764DF96265A33286C1B88BC20D37E82A910A79240F41CBF425D72DE63CEBEF8900289DD3002CAA36B06657EA2E958B86F7335A12D7DC14C7A45ABE036FAB54256DEAF4671D01B748450AD329D8504D760AE816C7797B617F4F5B6D317B32AB4D1BAF510FE407F40D500AB7BA992E8AAC8BDB2878D6ABD62974C39ABF07E4547636BD8EFC9DA54FC367521C8331FCB1566795394D70074CCFCBEF5B0235004BBDB1F61903D4E39951BE7FA4B159C82DF1FB666C2344BE6C75D6E0C6D3D96DA880F43C114CD45D1C866145484256EA202BB35ED6A1E0F407024C63965FAB105CE170E4A7677CE202030CE717BB8E736D8AA55FED368D23704AB1BB15EA179FC79BA48E12CE9D3CEFB5852C146BC7FB3590DF1757B43E76395F87BC67837883F7084A861F1429CEC17608F3DF06FC89ADCC09211A99B8192FD78908F931838DE4DAB0A41841C468D409A346BEAC2DC2B0FB3EEE55C35431D4D744487DB841E4B8C4EE78B20D1EFBA2A85DA336EAD8271B0C35859921CFF408656FE3CD8AE8BBFF3CD6173EBA748A0487CE2EB58C920C83172022DBF5FA6A47B42EE888EADDC5FEAB17EAEB193EECBD27981C5F7BD92EEAE54D0E71BC10613C4747C78B925FB689B62F5B05877C778486059515DBC7AED276BCC56C01A3146C9914E744CDE9582C1CDC229E58B1659B0473205B2740C4078157656C8D4ED02919537EDFC43B5A9B42886CC98D4BE57FA9265F460AE5E7CDCFFA340B940BB8AC35390762C84D4441817EE2EBA4CBA276A99B04F00018DC3BAF1F706B331E65E5F60C1697F24DDF18E2D40BFDE79A9BC49D1341198FCC4C50B5B251E9CF2C0556386F7D9252B41BC58ECFAD054B3B42B985302E36EEB60C3D534D1331FF95F8CC8FA75183B0FCFD76421798637CE4A63CE0DAB7092972DC2912211BD660649288CD22560B0D2C0CABB52EB4C4E5937DD1BF15A29C2F86F6812CAEDF62AC8138F511BB7D621ACA0A3199D1D6B3DB87052FC39C3427C0480FF48E7D537BC08D1E5CFDE9A37917DD1C99F82D846B6742F48627345D790D0AC7EC97F7581ECE21E9F1320BF6ACADCC4FE496A609513CA5E974FE7F6BFC823CB6CDBF46CC4F7D03D75C201200A67FC623957BB86E4CAB883D9D9F16176E7CA7D0E75D88A0A0D36588946A151C4B711090A7B84869E3D172B7BE3F02825F841D5EC81A1AF94E21C2B8463EF53BFD22B6241719809D141ED2461485928CA782BB2B8906D380B9BA5C4B694B06302B9C02F20686898D2FD5781C01B6C8C213F32E1A8327E845CAB5461982B586571D96D4ED1CAF69A6D5D012F4AB2456E71A4AF9F1F1A9668D3797C937BBEC7E4B7ABF785A97B53864D0A598F469E34979B1835C68C382FBF85EF95AB957C77B9CD337C6FB124D67C3AF8B1D6ACE33F845B7A3C8A50FD4C80DEB7526D2C435C812AC1FD892D455220F8591B52F78594DEAF6D499C64C17C213BDE113667E3C58A833328932542255DAB6EAFEB46EB1B2589B0929D1DF65F7CC05B3EA3CC86EB7BF25A320F0E3532BF47746C04DF47DD8B88FC093A99D1506D9E4EC1E";

        temp = AesDecryptUtil.hexStringToBytes(Objects.requireNonNull(encryptedString));
        try {
            decryptedString = new String(Objects.requireNonNull(AesDecryptUtil.vpadDecrypt(
                    AesDecryptUtil.MODE_CBC, iv, newKeys.length * 8, newKeys, temp, temp.length)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("decryptedString = " + decryptedString);
    }

}
